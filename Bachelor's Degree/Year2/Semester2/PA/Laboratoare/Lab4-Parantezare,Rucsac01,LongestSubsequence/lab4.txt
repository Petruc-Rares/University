322CD Petruc Rares
LABORATOR 4

p = [2 4 3 5 2] 
     ^ ^ ^ ^ ^
     | | | | |
     0 1 2 3 4 (indecsi)


          v
       t     u
    x     y    z
  0     0     0    0
2    4     3     5    2
^    ^     ^     ^    ^
|    |     |     |    |
p0   p1    p2    p3   p4


x = m[1][2] => i = 1, j = 2;

x = min(m[1][1] + m[2][2] + p0*p1*p2); k = 1
x = min (0 + 0 + 2*4*3)
x = 24

s[1][2] = 1;

y = m[2][3] => i = 2, j = 3;

y = min(m[2][2] + m[3][3] + p1*p2*p3); k = 2
y = min(0 + 0 + 4*3*5)
y = 60

s[2][3] = 2;

z = m[3][4] => i = 3, j = 4;

z = min(m[3][3] + m[4][4] + p2*p3*p4); k = 3
z = min(0 + 0 + 3*5*2)
z = 30

s[3][4] = 3;
_____________________________________
mai completam un rand din triunghi:

          v
       t     u
    24     60    30
  0     0     0    0
2    4     3     5    2
^    ^     ^     ^    ^
|    |     |     |    |
p0   p1    p2    p3   p4


t = m[1][3] => i = 1, j = 3;

t = min(m[1][1] + m[2][3] + p0*p1*p3, m[1][2] + m[3][3] + p0*p2*p3) ; k=1, k=2
t = min(0 + 60 + 2*4*5, 24 + 0 + 2*3*5)
t = min(60 + 40, 24 + 30)
t = min(100, 54)
t = 54

s[1][3] = 2;

u = m[2][4] => i = 2, j = 4;

u = min(m[2][2] + m[3][4] + p1*p2*p4, m[2][3] + m[4][4] + p1*p3*p4) ; k=2, k=3
u = min(0 + 30 + 4*3*2, 60 + 0 + 4*5*2)
u = min(30 + 24, 60 + 40)
u = 54

s[2][4] = 2;
_____________________________________
mai completam un rand din triunghi:

           v
       54     54
    24     60    30
  0     0     0    0
2    4     3     5    2
^    ^     ^     ^    ^
|    |     |     |    |
p0   p1    p2    p3   p4

v = m[1][4] => i = 1, j = 4;

v = min(m[1][1] + m[2][4] + p0*p1*p4, m[1][2] + m[3][4] + p0*p2*p4, m[1][3] + m[4][4] + p0*p3*p4); k=1, k=2, k=3
v = min(0 + 54 + 2*4*2, 24 + 30 + 2*3*2, 54 + 0 + 2*5*2)
v = min(54 + 16, 54 + 12, 54 + 20)
v = min(70, 66, 74)
v = 66

s[1][4] = 2;

Numarul optim de operatii este: 66

Parantezarea optima este: 
(A1 * A2) * (A3 * A4)

______________________________________________________________________

2.
M = 50kg;
m1 = 10kg, v1 = 60;
m2 = 30kg, v2 = 120;
m3 = 20kg, v3 = 100;

=> v={60, 120, 100}
   m={10, 30, 20}


D[i][j] = max(D[i-1][j], D[i-1][j-m[i-1]] + v[i - 1]);


D:


	j	0  ...	10  ...	20  ...	30  ...	40  ...	50
i		0 	0	0	0	0	0
m1=10; v1=60    0	60	60 	60	60	60
m2=30; v2=120   0       60      60      120     180     180
m3=20; v3=100   0       60     100      160     180     220

Initializam primul rand si prima coloana cu zerouri

pentru i = 1 se va intra pe primul else care va fi de fiecare data
max(D[0][j], D[0][j-greutati[0]) + v[0]) = max(0, 0 + 60) = 60;

pentru i = 2:
j = 10

greutati[1] <= 10 "F" si greutati[1] <= 20 "F" => completam in consecinta
conform ultimului else

j = 30
D[2][30] = max(D[1][30], D[1][30-m[1]] + v[1])
	 = max(60, D[1][0] + 120)
	 = max(60, 0 + 120)
	 = 120
j = 40
D[2][40] = max(D[1][40], D[1][40-m[1]] + v[1])
	 = max(60, D[1][10] + v[1])
	 = max(60, 60 + 120)
	 = 180

j = 50
D[2][50] = max(D[1][50], D[1][50-m[1]] + v[1])
	 = max(60, D[1][20] + 120)
	 = max(60, 60 + 120)
	 = 180

pentru i = 3:


j = 10
greutati[2] <= 10 "F" => punem valoarea de pe randul anterior in tabel

j = 20
D[3][20] = max(D[2][20], D[2][20-m[2]] + v[2])
	 = max(60, 0 + 100)
	 = 100

j = 30
D[3][30] = max(D[2][30], D[2][30-m[2]] + v[2])
	 = max(120, D[2][10] + 100)
         = max(120, 60 + 100)
	 = 160

j = 40
D[3][40] = max(D[2][40], D[2][40-m[2]] + v[2])
	 = max(180, D[2][20] + 100)
         = max(180, 60 + 100)
	 = 180

j = 50
D[3][50] = max(D[2][50], D[2][50-m[2]] + v[2])
	 = max(D[2][50], D[2][30] + 100)
	 = max(180, 120 + 100)
	 = 220


___________________________________________________________
3.
v = {1, 2, 9, 3, 8, 4, 7};

d = {1, 1, 1, 1, 1, 1, 1};

i = 0 => d ramane la fel

i = 1:
v[0] < v[1] "A" => d[1] = max(d[1], d[0] + 1)
			    => d[1] = max(1, 1 + 1)
			    => d[1] = 2

d = {1, 2, 1, 1, 1, 1, 1};

i = 2:
v[1] < v[2] "A" => d[2] = max(d[2], d[1] + 1)
			    => d[2] = max(1, 2 + 1)
			    => d[2] = 3

v[0] < v[2] "A" => d[2] = max(d[2], d[0] + 1)
			    => d[2] = max(3, 1 + 1)
				=> d[2] = 3;

d = {1, 2, 3, 1, 1, 1, 1};

i = 3:
v[2] < v[3] "F"
v[1] < v[3] "A" => d[3] = max(d[3], d[1] + 1)
			    => d[2] = max(1, 2 + 1)
				=> d[2] = 3;

v[0] < v[3] "A" => d[3] = max(d[3], d[0] + 1)
			    => d[2] = max(3, 1 + 1)
				=> d[2] = 3;

d = {1, 2, 3, 3, 1, 1, 1};		

i = 4:
v[3] < v[4] "A" => d[4] = max(d[4], d[3] + 1)
			    => d[2] = max(1, 3 + 1)
				=> d[2] = 4;

v[2] < v[4] "F"

v[1] < v[4] "A" => d[4] = max(d[4], d[1] + 1)
			    => d[2] = max(4, 2 + 1)
				=> d[2] = 4;

v[0] < v[4] "A" => d[4] = max(d[4], d[0] + 1)
			    => d[2] = max(4, 1 + 1)
				=> d[2] = 4;

d = {1, 2, 3, 3, 4, 1, 1};

i = 5:
v[4] < v[5] "F"

v[3] < v[5] "A" => d[5] = max(d[5], d[3] + 1)
			    => d[5] = max(1, 3 + 1)
				=> d[5] = 4;

v[2] < v[5] "F"

v[1] < v[5] "A" => d[5] = max(d[5], d[1] + 1)
			    => d[5] = max(4, 2 + 1)
				=> d[5] = 4;

v[0] < v[5] "A" => d[5] = max(d[5], d[0] + 1);
				=> d[5] = max(4, 1 + 1);
				=> d[5] = 4;


d = {1, 2, 3, 3, 4, 4, 1};

i = 6:
v[5] < v[6] "A" => d[6] = max(d[6], d[5] + 1)
				=> d[6] = max(1, 4 + 1)
				=> d[6] = 5;

v[4] < v[6] "F"

v[3] < v[6] "A" => d[6] = max(d[6], d[3] + 1)
				=> d[6] = max(5, 3 + 1)
				=> d[6] = 5

v[2] < v[6] "F"

v[1] < v[6] "A" => d[6] = max(d[6], d[1] + 1)
				=> d[6] = max(5, 2 + 1)
				=> d[6] = 5

v[0] < v[6] "A" => d[6] = max(d[6], d[0] + 1)
				=> d[6] = max(5, 1  + 1)
				=> d[6] = 5

se iese din for si in d se obtine maxim valoarea 5 => subsirul crescator de lungime maxima are lungimea egala cu 5
acesta este "1 2 3 4 7"


